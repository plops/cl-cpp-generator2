* Intro

This example is based on the Vulkan C++ example in ../04 ...

However, here I tried to limit myself to C18 with GNU extensions.  I
also split the code into multiple files in order to speed up iterative
development.

The goal of this code is to have a fast prototyping platform. I want
to experiment with visualizations. I might want to get this running on
Android.

* Dependencies

This project requires two header-only libraries. stbi_load to load
texture images and tinyobj_loader_c for geometry. Run
source/get_libs.sh it will download the two required headers, one
texture and one file with geometry.

* Building

I assume that you have quicklisp installed. Add the cl-cpp-generator2
package in your home directory like this:
#+BEGIN_EXAMPLE
cd ~
mkdir stage
git clone https://github.com/plops/cl-cpp-generator2
ln -s ~/stage/cl-cpp-generator2 ~/quicklisp/local-projects.
#+END_EXAMPLE

Open gen01.lisp in emacs/slime and call the s-expressions in
sequence. I use eval-in-repl and C-return but you can also use
C-M-x. The idea is to modify the last huge s-expression and press C-c
C-c to regenerate all necessary c files.


Currently 29 C files are being generated. Once they exist the commands
#+BEGIN_EXAMPLE
rm proto2.h; touch proto2.h; touch *.c; make proto2.h
#+END_EXAMPLE
will collect all function definitions in these files and store them in
proto2.h.

The make file and gen01.lisp is written so that files that have not
changed will not be fed unneccessarily through the compiler. This
works most of the time during development but may fail if a header or
the makefile has been edited.

In this case it is best to call
#+BEGIN_EXAMPLE
make genclean
#+END_EXAMPLE
This will remove all generated c files. After this run the gen01.lisp
code block twice in order to generate the c files again (and also
proto2.h).


If you just want to change the CFLAGS in the makefile, it may be
sufficient to recompile all object files. You can enforce this with
#+BEGIN_EXAMPLE
make clean
rm proto2.h proto*.h
touch proto2.h # we need an empty proto2.h stub so that  gcc doesnt complain about missing file 
make -j4 proto2.h
touch vulkan*.c
make -j4 vulkan_demo
#+END_EXAMPLE
In this case you don't have to regenerate the c files from lisp.
 
Note that the files that load the texture and the model contain a
pragma that will force level 3 optimized (-O3) compilation.

* Printing

The lisp macro vkprint allows to print the name of c variable, their
value and the type. It constructs the format string for many scalar
objects using the _Generic construct that was introduced to C11.

Here is an example:
#+BEGIN_EXAMPLE
(defun generateMipmaps (image imageFormat texWidth texHeight mipLevels)
  (declare (values void)
           (type VkImage image)
	   (type VkFormat imageFormat)
	   (type int32_t texHeight mipLevels texWidth))
  (dotimes (i n)
    ,(vkprint " vkCmdPipelineBarrier " `(i))))
#+END_EXAMPLE

vkprint expands to this c code:
#+BEGIN_EXAMPLE
 {
     __auto_type current_time  = now();
     printf("%6.6f", ((current_time)-(state._start_time)));
     printf(" ");
     printf(printf_dec_format(__FILE__), __FILE__);
     printf(":");
     printf(printf_dec_format(__LINE__), __LINE__);
     printf(" ");
     printf(printf_dec_format(__func__), __func__);
     printf("  vkCmdPipelineBarrier : ");
     printf(" i=");
     printf(printf_dec_format(i), i);
     printf(" (%s)", type_string(i));
     printf("\n");
 };
#+END_EXAMPLE

What is nice about this is that the C preprocessor macro
printf_dec_format can provide a format string for most (scalar)
variables. However, I think the C code gets quite unreadable because
there are too many lines.

I will now try to create a variadic C preprocessor macro that
condenses the print statement into a call like this:

#+BEGIN_EXAMPLE
print(" vkCmdPipelineBarrier ",i)
#+END_EXAMPLE

Okay. The C preprocessor may allow this but I'm not going to bother:
https://stackoverflow.com/questions/1872220/is-it-possible-to-iterate-over-arguments-in-variadic-macros
