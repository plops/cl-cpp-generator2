* Introduction

The common lisp code modifies the boiler plate code of a STM32CubeIDE project.

Open STM32CubeIDE and call `File -> New -> STM32 Project from
STM32CubeMX .ioc File` and load the ioc file from this repo. This will
generate boiler plate for ADC, DAC and UART for a Nucleo L476RG board.

The boiler plate code looks like this:
#+begin_example
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_DAC1_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
#+end_example

The following common lisp code expands to C code for user code section 3:
#+begin_example
(define-part
  `(main.c 3
	   (do0
	    (HAL_DAC_SetValue &hdac1 DAC_CHANNEL_1 DAC_ALIGN_12B_R value_dac)
	    (if (< value_dac 2047)
		(incf value_dac)
	      (setf value_dac 0))
	    (HAL_Delay 10)
	    (let ((n (snprintf (cast int8_t* BufferToSend)
			       ,n-tx-chars
			       (string "dac=%d adc=%d")
			       value_adc
			       (aref value_adc 0))))
	      (declare (type int n))
	      (unless (== HAL_OK (HAL_UART_Transmit_DMA &huart2 BufferToSend n))
		(Error_Handler)))
	    "}"
	    )))
#+end_example
Expanded the code will look like this:
#+begin_example
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
		if ((value_dac) < (2047)) {
			(value_dac)++;
		} else {
			value_dac = 0;
		}
		HAL_Delay(10);
		{
			int n = snprintf((int8_t*) BufferToSend, 128, "dac=%d adc=%d",
					value_adc, value_adc[0]);
			if (!((HAL_OK) == (HAL_UART_Transmit_DMA(&huart2, BufferToSend, n)))) {
				Error_Handler();
			};
		};
	}
	/* USER CODE END 3 */
#+end_example

Note that the boiler plate code contains a brace character `}`. This
is rather unfortunate because, I have to remember to explicitly place
this character in the Common Lisp s-expressions. Otherwise, the code
will not compile.


* Documentation about Nucleo

- https://www.youtube.com/watch?v=hyZS2p1tW-g nucleo l476rg
- https://www.st.com/en/evaluation-tools/nucleo-l476rg.html
- https://os.mbed.com/platforms/ST-Nucleo-L476RG/ best pin legends
- https://youtu.be/isOekyygpR8?t=127 uart virtual com port over usb
  - pa2 and pa3 at the bottom left
- https://youtu.be/OPrcpbKNSjU?t=328 freertos, cmsis-rtos v2
- https://youtu.be/OPrcpbKNSjU?t=429 task definition in ide
  - TIM6 for HAL timebase
  - osDelay(500) 
#+begin_example
(defun StartBlink02 (arg)
  (declare (type void* arg))
  (for ()
    (HAL_GPIO_TogglePin GPIOA GPIO_PIN_5)
    (osDelay 30))
  (osThreadTerminate nullptr))

#+end_example

- https://youtu.be/EsZLgqhqfO0?t=68 ADC and UART with DMA
- https://www.st.com/resource/en/application_note/dm00707058-how-to-implement-adaptive-synchronous-rectification-in-flyback-converters-using-stm32-mcus-stmicroelectronics.pdf flyback converter
- https://www.st.com/resource/en/application_note/cd00259245-audio-and-waveform-generation-using-the-dac-in-stm32-products-stmicroelectronics.pdf

- usb devices
#+begin_example

[ 6536.319630] usb 3-3: USB disconnect, device number 2
[ 6539.986032] usb 3-3: new full-speed USB device number 4 using xhci_hcd
[ 6540.140597] usb 3-3: New USB device found, idVendor=0483, idProduct=374b, bcdDevice= 1.00
[ 6540.140599] usb 3-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
[ 6540.140601] usb 3-3: Product: STM32 STLink
[ 6540.140602] usb 3-3: Manufacturer: STMicroelectronics
[ 6540.140603] usb 3-3: SerialNumber: 0670FF485649785087161721
[ 6540.257622] usb-storage 3-3:1.1: USB Mass Storage device detected
[ 6540.257771] scsi host7: usb-storage 3-3:1.1
[ 6540.260628] cdc_acm 3-3:1.2: ttyACM0: USB ACM device
[ 6541.274690] scsi 7:0:0:0: Direct-Access     MBED     microcontroller  1.0  PQ: 0 ANSI: 2
[ 6541.274789] sd 7:0:0:0: Attached scsi generic sg2 type 0
[ 6541.275014] sd 7:0:0:0: [sdc] 2120 512-byte logical blocks: (1.09 MB/1.04 MiB)
[ 6541.275160] sd 7:0:0:0: [sdc] Write Protect is off
[ 6541.275161] sd 7:0:0:0: [sdc] Mode Sense: 03 00 00 00
[ 6541.275300] sd 7:0:0:0: [sdc] No Caching mode page found
[ 6541.275302] sd 7:0:0:0: [sdc] Assuming drive cache: write through
[ 6541.292276] sd 7:0:0:0: [sdc] Attached SCSI removable disk

#+end_example

- repository https://www.youtube.com/watch?v=5m9HfOMljKg
- window -> preferences -> stm32cube -> firmware updater
- ~/STM32Cube/Repository/STM32Cube_FW_L4_V1.15.1 contains 1.9GB
- help -> manage embedded software packages

- https://www.youtube.com/watch?v=1WAtFzkfpLI&list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&index=5 crc check with dma
- https://youtu.be/y3WX3hBxbCY?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=200 description of dac
  - sample and hold mode for power saving


- https://youtu.be/QPxWiGo346Q?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=175
  - 2.5 clocks for sampling, 12.5 clocks for conversion
    - other sample times: 2.5, 6.5, 12.5, 24.5, 47.5, 92.5, 247.5, 640.5
  - 1 ADC with 12 bit => 5.33Msamples/s    865uA
  - 1 ADC 10kS/s -> 17uA
  - 1 ADC with 10 bit => 6.15Msamples/s   
  - 1 ADC with 6 bit => 8.88Msamples/s
  - ADC1 + ADC2 12 bit, in dual interleave mode can read 10Msamples/s
  - re-calibrate if vref changes more than 10% (coming back from sleep)
  - adc modes https://youtu.be/QPxWiGo346Q?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=293
  - oversampling allows up to 16 bit adc result
    - x4  => 13bit 1.33MS/s
    - x16 => 14    333kS/s
    - x64 => 15    83kS/s
    - x256 => 16   20.8kS/s
  - analog watchdog can stop sampling without cpu intervention
  - injected conversion stores in different register
 
- https://youtu.be/nLElR9CTnWM?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=150 adc hands on
  - connect dac and adc
  - neat: observe globals at runtime https://youtu.be/nLElR9CTnWM?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=667

- opamp https://youtu.be/Wc0_ec82_VA?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=112
  - 4 fixed gains 2,4,8,16
  - adc input
  - external capacitor allows low pass filtering
  - bga132 and bga169 packages have pins with 1nA leakage and allow high precision current to voltage conversion
  - normal mode 1.6MHz gain band width, 500uA output current
  - low power mode 0.42 MHz gain band width, 100uA output current

- https://youtu.be/kbwWuRMMJ40?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=132
  - how to configure gpio for led drive
    - output level: low
    - gpio mode: output push pull
    - no pull up/down
    - max output speed: low

- https://youtu.be/kzecsy9Qnhc?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=54
  - DAC to opamp (as PGA)
  - ADC to opamp output

- https://youtu.be/pQKdBRPSV2s?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=288 application of comparator/hysteresis with spikes at the beginning of PWM period
- https://youtu.be/1FtgmMDbeg4?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=124 drag and drop a pin with CTL

- https://youtu.be/2-aKn47NXC4?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=91
  - usart works in low power mode
  - maximum baud rate is 10Mbaud
  - autobaudrate detection  https://youtu.be/2-aKn47NXC4?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=624
    - bit at 1
    - 10xx
    - 0x7ff
    - 0x55
- https://youtu.be/DSrPZYPXUSM?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=267 uart hands on

- https://www.youtube.com/watch?v=mKlP0D2uZWM&list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&index=29
  - spi maixmum speed 40MHz (if the mcu is generating)
  - receiving spi is more challenging

- https://youtu.be/rLnQ3W8gmjY?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=67
  - virtual com port with usb
  - 2048 bytes buffer size
- https://youtu.be/GKpQ3n0_WwI?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=1391
  - dead time for bridges
  - can stop when ecc errors are detected
  - adc can be triggered by the timers (e.g. for 3 phase motor)

- https://youtu.be/yQH0bQxUJK8?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=45
  - low power timer runs even without clocks
  - for gas meter
  - can output pwm
  - inputs have glitch filtering circuitry

- https://youtu.be/XAgGS-NaztM?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=22
  - real time clock
  - 128 bytes erased on tamper detection
  - active in all low-power modes
  - 50 or 60Hz mains as reference clock
 
- https://youtu.be/xe3cwf-g8xU?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=79  window watchdog
  - check that software fullfills timing requirement
  - RCC_APB1ENR1
  - 51.2us .. 26.2,ms
  - debugger can halt counter

- https://youtu.be/w-ZOj0WlKHs?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=87 dfsdm
  - more than 16bit resolution up to 24 bits
  - serial interface to external analog part one or two wires
    - 20 MHz
    - SPI or manchester coded
    - manchester cheapest for optical isolation
    - also input from internal adcs but not on the device i have
  - 32bit internal integrator
  - 24bit final data register width
  - extremes detector
  - STPMS2 thermal monitor 2EUR
    - programmable gain low noise chopper amp
    - two delta sigma
    - bandgap voltage reference
    - https://eu.mouser.com/datasheet/2/389/cd00253175-1796951.pdf
    - https://youtu.be/w-ZOj0WlKHs?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=1263 3 phase power meter without transformer
-  https://youtu.be/MdDqVeIGhec?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=135 handson microphone
- https://youtu.be/iV8flZyTAa4?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=436 lcd waveform discription
  - can drive high capacitive loads
  - lots of pins https://youtu.be/UHSXeXvCVJA?list=PLnMKNibPkDnEEvQWrDqVuu1w_iQ214GXi&t=271

- adc scan conversion https://www.st.com/resource/en/application_note/cd00258017-stm32-s-adc-modes-and-their-applications-stmicroelectronics.pdf


** How to execute from RAM

- https://stackoverflow.com/questions/42612329/executing-code-from-ram-in-stm32
- flash seems to be faster: https://community.st.com/s/question/0D50X00009XkWw7/stm32f4-how-can-i-move-code-into-fast-ram

** Voltage Reference
- $3 reference https://www.maximintegrated.com/en/products/analog/voltage-references/MAX6126.html
- adc accuracy app note https://www.st.com/content/ccc/resource/technical/document/application_note/group0/3f/4c/a4/82/bd/63/4e/92/CD00211314/files/CD00211314.pdf/jcr:content/translations/en.CD00211314.pdf
  - improve resolution by adding noise (or triangular sweep)

** Float

- https://stackoverflow.com/questions/28334435/stm32-printf-float-variable
#+begin_example
with the GCC ARM Embedded toolchain, floating point support in printf isn't enabled by default. To enable, add -u _printf_float to your LDFLAGS.
#+end_example
- another way
#+begin_example
int i = 132;
 printf("Result is: %d.%d", i/10, i%10);
#+end_example
