* More text-davinci-003

** Fortran sinc
#+begin_example

Write modern Fortran code that fills a 3D single-float array with a centered sinc function and computes the 3D FFT of it.

program sinc_fft
  implicit none
  integer, parameter:: nx=32, ny=32, nz=32
  integer:: i,j,k
  real(8), dimension(nx,ny,nz):: sinc_arr, fft_arr
  real(8):: x,y,z,x0,y0,z0

  x0 = 0.5*real(nx-1,8)
  y0 = 0.5*real(ny-1,8)
  z0 = 0.5*real(nz-1,8)
  
  do k=1,nz
    z = real(k-1,8) - z0
    do j=1,ny
     y = real(j-1,8) - y0
      do i=1,nx
        x = real(i-1,8) - x0
        sinc_arr(i,j,k) = sin(3.14159265*(x*x+y*y+z*z))/(3.14159265*(x*x+y*y+z*z))
      end do
    end do
  end do

  call cfft3d(sinc_arr, fft_arr)

end program sinc_fft
#+end_example

** Fortran FFT

#+begin_example
Write modern Fortran code that computes FFT of  a 3D single-float array.

program fft3D
   implicit none
   integer, parameter :: nx=32, ny=32, nz=32
   real, dimension (nx,ny,nz) :: data
   complex, dimension (nx,ny,nz) :: cdata

   integer :: i,j,k

   ! Initialize data
   do i = 1, nx
      do j = 1, ny
         do k = 1, nz
            data(i,j,k) = i*j*k
         end do
      end do
   end do

   ! Convert to complex
   do i = 1, nx
      do j = 1, ny
         do k = 1, nz
            cdata(i,j,k) = cmplx(data(i,j,k), 0, kind=kind(1.0))
         end do
      end do
   end do

   ! Call FFT
   call cfft3d(cdata)

   ! Print out result
   do i = 1, nx
      do j = 1, ny
         do k = 1, nz
            write(*,*) cdata(i,j,k)
         end do
      end do
   end do

end program fft3D
#+end_example

- link it
#+begin_example
Write modern Fortran code that computes FFT of  a 3D single-float array. Also show how to link it on Linux.

! Example 3D FFT in Fortran

program FFT_3D
  implicit none
  integer, parameter :: nx=128,ny=128,nz=128
  real, dimension(nx,ny,nz) :: array
  complex, dimension(nx,ny,nz) :: array_complex
  integer :: i,j,k
  
  ! Initialize array
  do k=1,nz
    do j=1,ny
      do i=1,nx
        array(i,j,k) = real(i+j+k)
      end do
    end do
  end do
  
  ! Convert to complex
  do k=1,nz
    do j=1,ny
      do i=1,nx
        array_complex(i,j,k) = cmplx(array(i,j,k),0.0_4)
      end do
    end do
  end do
  
  ! Perform FFT
  call cfft3d(array_complex,nx,ny,nz,-1)

end program FFT_3D

! Linking on Linux
gfortran -c FFT_3D.f90
gfortran -o FFT_3D FFT_3D.o -lfftw3
#+end_example

** Fortran fit parabola

#+begin_example

00) :: filename

  print *, 'Enter the filename of your CSV file: '
  read *, filename

  open(unit=10, file=filename, action='read', status='old', iostat=i)
  if (i /= 0) then
    print *, 'Error opening file'
    stop
  end if

  n = 0
  do
    read(10, *, iostat=i) x(n+1), y(n+1)
    if (i /= 0) exit
    n = n+1
  end do

  close(10)

  ! Fit parameters
  a = sum((x**2)*y) / sum((x**2)*x)
  b = (sum(x*y) - a*sum(x**2)) / sum(x**2)
  c = (sum(y) - a*sum(x) - b*sum(x**2)) / n

  ! Output
  print *, 'The parabola is y = ', a, 'x^2 + ', b, 'x + ', c

  end program parabola_fitting

! Compile with: gfortran parabola_fitting.f90 -o parabola_fitting

#+end_example


** Fortran exponential Fit

#+begin_example

ata. Assume that the noise of the intensity values is poisson-distributed. Show the command to compile the program on Linux.

program exponential_fit
    use, intrinsic :: iso_fortran_env,only: real64
    implicit none
    integer, parameter :: dp = selected_real_kind(15, 307)
    real(dp), parameter :: pi = 3.141592653589793

    ! Declare variables
    integer :: n, i
    real(dp) :: time(50), intensity(50), a, b
    ! Read data from CSV file
    open(10, file='data.csv', action='read')
    read(10,*) n
    do i=1,n
        read(10,*) time(i), intensity(i)
    end do
    close(10)

    ! Fit exponential decay curve
    a = -sum((time-mean(time))*intensity)/sum((time-mean(time))**2)
    b = mean(intensity) + a*mean(time)

    ! Print exponential decay equation
    write(*,*) 'Intensity = ', b, '*exp(', a, '*time)'

end program exponential_fit

! Compile the program on Linux
gfortran exponential_fit.f90 -o exponential_fit.out
#+end_example

** R decay fit

#+begin_example

Write R code that reads a CSV file of (time, intensity) values and fits an exponential decay curve to the data. Assume that the noise of the intensity values is poisson-distributed. Show the command to run the program on Linux.

# Install the 'expsmooth' package
install.packages("expsmooth")

# Load the library
library("expsmooth")

# Read in the CSV file
data <- read.csv("time_intensity.csv")

# Fit the exponential decay curve to the data
fit <- HoltWinters(data$Intensity, gamma = FALSE, l.start = c(0.2, 0.2))

# Print the fit to the console
print(fit)

# Run the program on Linux
Rscript --vanilla time_intensity.R

#+end_example

** Python HDR image

#+begin_example
Assume that we have 5 raw images of a static scene, that were acquired with different and known integration times. For each integration time we also have a dark image. Write code that computes a HDR image from the raw exposed and dark images.

// Import the necessary libraries
import cv2
import numpy as np 
import matplotlib.pyplot as plt

# Read in the raw exposed images and dark images
img1 = cv2.imread('image1.png', 1)
dark1 = cv2.imread('dark1.png', 1)
img2 = cv2.imread('image2.png', 1)
dark2 = cv2.imread('dark2.png', 1)
img3 = cv2.imread('image3.png', 1)
dark3 = cv2.imread('dark3.png', 1)
img4 = cv2.imread('image4.png', 1)
dark4 = cv2.imread('dark4.png', 1)
img5 = cv2.imread('image5.png', 1)
dark5 = cv2.imread('dark5.png', 1)

# Subtract each raw exposed image from its corresponding dark image 
img1_sub = img1 - dark1
img2_sub = img2 - dark2
img3_sub = img3 - dark3
img4_sub = img4 - dark4
img5_sub = img5 - dark5

# Create a list of the integration times
int_times = [1, 2, 3, 4, 5]

# Convert the list of integration times to a numpy array
int_times_arr = np.array(int_times)

# Calculate the weights for each image based on the integration times
weights = 1/int_times_arr

# Create a list of weights
weights_list = [weights[0], weights[1], weights[2], weights[3], weights[4]]

# Calculate the weighted average of the images
hdr_img = (img1_sub * weights_list[0] + img2_sub * weights_list[1] +
           img3_sub * weights_list[2] + img4_sub * weights_list[3] +
           img5_sub * weights_list[4])

# Display the HDR image
plt.imshow(hdr_img)
plt.show()

#+end_example

** Python HDR overexposed

#+begin_example

ation times 
t1 = 2 #seconds
t2 = 5 #seconds
t3 = 10 #seconds
t4 = 20 #seconds
t5 = 30 #seconds

#load raw images 
img1 = cv2.imread("img_raw_t1.png")
img2 = cv2.imread("img_raw_t2.png")
img3 = cv2.imread("img_raw_t3.png")
img4 = cv2.imread("img_raw_t4.png")
img5 = cv2.imread("img_raw_t5.png")

#load dark images 
dark1 = cv2.imread("dark_t1.png")
dark2 = cv2.imread("dark_t2.png")
dark3 = cv2.imread("dark_t3.png")
dark4 = cv2.imread("dark_t4.png")
dark5 = cv2.imread("dark_t5.png")

#subtract dark images from raw images
img1 = img1 - dark1
img2 = img2 - dark2
img3 = img3 - dark3
img4 = img4 - dark4
img5 = img5 - dark5

#normalize the images 
img1 = img1/t1
img2 = img2/t2
img3 = img3/t3
img4 = img4/t4
img5 = img5/t5

#create a list of images 
imgs = [img1, img2, img3, img4, img5]

#create empty array to store HDR image 
hdr_img = np.zeros_like(img1)

#loop through images and add to HDR image
for img in imgs:
    #check for overexposed pixels 
    overexposed_pixels = np.where(img > t5/t1)
    img[overexposed_pixels] = 0
    #add normalized img to hdr_img 
    hdr_img = hdr_img + img

#divide by number of images to get average for each pixel
hdr_img = hdr_img/len(imgs)

#display HDR image 
cv2.imshow("HDR Image", hdr_img)
cv2.waitKey(0)

#+end_example

- that is not a good solution


** Python superimpose images

#+begin_example

Assume that we have 5 raw images of a static scene. The images were taken with slightly different orientation of the camera. Correct the shift between the images and average the images. Show the code that does this.

// import necessary libraries 
import numpy as np 
import cv2 

# list of images 
imgs = ['image1.jpg','image2.jpg','image3.jpg', 'image4.jpg','image5.jpg']

# create an empty list to store images 
images = []

# loop over images and store them in the list 
for i in imgs:
    images.append(cv2.imread(i))

# create a variable to store the reference image 
ref_image = images[0]

# loop over rest of the images and register them with the reference image 
for i in range(1,len(images)):
    images[i] = cv2.warpAffine(images[i], cv2.estimateRigidTransform(images[i], ref_image, fullAffine=False), ref_image.shape[:2])

# calculate the average of all images 
avg_image = np.mean(images, axis=0).astype('uint8')

# show the output image 
cv2.imshow("Average Image", avg_image) 
cv2.waitKey(0)
#+end_example

** VHDL DCT

#+begin_example

        image_out : out std_logic_vector(319 downto 0)
    );
end DCT_8x8;

architecture arch_DCT_8x8 of DCT_8x8 is
-- Create 8x8 macroblocks from the input image
    type macroblock_array is array (7 downto 0, 7 downto 0) of std_logic_vector(7 downto 0);
    signal macroblock : macroblock_array;
begin
    -- Process the 8x8 macroblocks 
    process (image_in)
    begin
        -- Initialize the macroblock array
        for i in 0 to 7 loop
            for j in 0 to 7 loop
                macroblock(i, j) := (others => '0');
            end loop;
        end loop;
        -- Copy the input image into macroblock array
        for i in 0 to 7 loop
            for j in 0 to 7 loop
                macroblock(i, j) := image_in((i*8 + j)*8 +: 8);
            end loop;
        end loop;
        -- Compute the DCT of each 8x8 macroblock
        for i in 0 to 7 loop
            for j in 0 to 7 loop
                macroblock(i, j) := compute_DCT(macroblock(i, j));
            end loop;
        end loop;
        -- Copy the macroblock array into output image
        for i in 0 to 7 loop
            for j in 0 to 7 loop
                image_out((i*8 + j)*8 +: 8) := macroblock(i, j);
            end loop;
        end loop;
    end process;
end arch_DCT_8x8;

-- subprogram to compute the DCT of 8x8 matrix
function compute_DCT (m : std_logic_vector(7 downto 0)) return std_logic_vector is
    variable dct_coeff : std_logic_vector(7 downto 0);
    variable c : real;
    variable sum : real := 0.0;
begin
    -- Compute the DCT coefficients
    for k in 0 to 7 loop
        if k = 0 then
            c := 1.0 / sqrt(2.0);
        else 
            c := 1.0;
        end if;
        for n in 0 to 7 loop
            sum := sum + to_real(m(n)) * cos((2.0 * real(n) + 1.0) * real(k) * pi() / 16.0) * c;
        end loop;
        dct_coeff(k) := to_slv(sum);
    end loop;
    return dct_coeff;
end compute_DCT;
#+end_example


** Verilog DCT

#+begin_example

Show Verilog code that takes a 320x240 pixel 8-bit gray scale image and computes DCT of 8x8 macroblocks. Use fixed-point arithmetic.

`module dct_8x8(clk, i_data, o_data);
 
 // Inputs
 input clk;
 input [7:0] i_data;
 
 // Outputs
 output [7:0] o_data;
 
 // Internal signals
 reg signed [15:0] c_coeffs [7:0];
 reg signed [15:0] c_data [7:0];
 reg signed [15:0] c_out [7:0];
 reg [7:0] counter;
 
 // Pre-calculated Cosine Coefficients
 always @ (*) begin
 c_coeffs[0] = 16384;
 c_coeffs[1] = 14790;
 c_coeffs[2] = 12288;
 c_coeffs[3] = 9102;
 c_coeffs[4] = 5793;
 c_coeffs[5] = 2430;
 c_coeffs[6] = 0;
 c_coeffs[7] = -2430;
 end
 
 // Initialize counter
 always @ (posedge clk) begin
 counter <= 0;
 end
 
 // Load data
 always @ (posedge clk) begin
 c_data[counter] <= i_data;
 end
 
 // Compute DCT
 always @ (posedge clk) begin
 
 c_out[0] = (c_data[0] * c_coeffs[0]) >> 14;
 c_out[1] = 0;
 c_out[2] = 0;
 c_out[3] = 0;
 c_out[4] = 0;
 c_out[5] = 0;
 c_out[6] = 0;
 c_out[7] = 0;
 
 for (int i = 1; i < 8; i++) begin
 c_out[0] += (c_data[i] * c_coeffs[i]) >> 14;
 c_out[1] += (c_data[i] * c_coeffs[7-i]) >> 14;
 c_out[2] += (c_data[i] * c_coeffs[2*i]) >> 14;
 c_out[3] += (c_data[i] * c_coeffs[6-2*i]) >> 14;
 c_out[4] += (c_data[i] * c_coeffs[3*i]) >> 14;
 c_out[5] += (c_data[i] * c_coeffs[5-3*i]) >> 14;
 c_out[6] += (c_data[i] * c_coeffs[4*i]) >> 14;
 c_out[7] += (c_data[i] * c_coeffs[4-4*i]) >> 14;
 end
 
 end
 
 // Output result
 always @ (posedge clk) begin
 o_data <= c_out[counter];
 
 if (counter == 7) begin
 counter <= 0;
 end else begin
 counter <= counter + 1;
 end
 
 end
 
endmodule`
#+end_example

** UART protocol C

#+begin_example

Show code that sends data over UART. Use checksums to verify integrity and send occasional packets that allow resynchronization.

// Initialize UART interface
UART_Init();

// Initialize check sum generator
CRC_Init();

// Create packet of data to be sent
packet_t data = {.data = {0xFF, 0x00, 0xA2, 0x04}, .length = 4};

// Create a packet header
packet_header_t header = {.sync_flag = 0xA5, .data_length = data.length};

// Calculate checksum
uint16_t checksum = CRC_Calculate(data.data, data.length);

// Create packet trailer
packet_trailer_t trailer = {.checksum = checksum};

// Send header
UART_SendData(&header, sizeof(header));

// Send data
UART_SendData(data.data, data.length);

// Send trailer
UART_SendData(&trailer, sizeof(trailer));

// Send resync packet
UART_SendData(0xA5, 1);
#+end_example

- check parity and crc

#+begin_example
    serialPort.write(buffer);
    
    // Send a resynchronization packet
    serialPort.write(Buffer.from([0xAA, 0xFA]));
}

Receiver:

// This function should be called when a byte is received over UART
function receiveUART8E1(byte) {
    let dataBuffer = [];
    let parity;
    let checksum;
    
    // If the byte is 0xAA, this is a resynchronization packet
    if (byte === 0xAA) {
        // Read the next byte
        byte = serialPort.read();
        // If the byte is 0xFA, this is a valid resynchronization packet
        if (byte === 0xFA) {
            // Set the state to start receiving data
            state = 'receiving';
        }
    }
    // If the state is 'receiving'
    if (state === 'receiving') {
        // If the parity is correct
        if (parityCheck(byte)) {
            // Add the byte to the data buffer
            dataBuffer.push(byte);
            // When the buffer is full
            if (dataBuffer.length === 9) {
                // Calculate the checksum
                for (let i=0; i < 8; i++) {
                    parity ^= dataBuffer[i];
                    checksum += dataBuffer[i];
                }
                // Verify checksum
                if (checksum === dataBuffer[8] && parity === dataBuffer[9]) {
                    // Process the data
                    processData(dataBuffer.slice(0, 8));
                }
                // Reset the state
                state = 'idle';
            }
        }
        else {
            // Discard the byte and reset the state
            state = 'idle';
        }
    }
}

// This function checks the parity of a byte
function parityCheck(byte) {
    let parity = 0;
    for (let i=0; i < 8; i++) {
        parity ^= (byte >> i) & 1;
    }
    return parity === 0;
}

#+end_example
