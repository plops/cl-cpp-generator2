# AUTOGENERATED! DO NOT EDIT! File to edit: 01_convert.ipynb (unless otherwise specified).

__all__ = ['start_time', 'debug', 'df_status', 'parser', 'args', 'column_names', 'df_', 'df', 'a', 'fn']

# Cell
import matplotlib
import matplotlib.pyplot as plt

plt.ion()
import time
import numpy as np
import pandas as pd
import matplotlib
import argparse
from matplotlib.pyplot import plot, imshow, tight_layout, xlabel, ylabel, title, subplot, subplot2grid, grid, legend, figure, gcf, xlim, ylim


# Cell
_code_git_version = "310b02dd88cfeb77b43fca8f523763df258454ab"
_code_repository = "https://github.com/plops/cl-cpp-generator2/tree/master//example/65_filament/script/01_convert.ipynb"
_code_generation_time = "20:56:17 of Friday, 2021-12-31 (GMT+1)"
start_time = time.time()
debug = True


# Cell
df_status = pd.DataFrame([
    dict(name="numpy", version=np.__version__),
    dict(name="pandas", version=pd.__version__),
    dict(name="matplotlib", version=matplotlib.__version__)
])
print(df_status)


# Cell
parser = argparse.ArgumentParser()
parser.add_argument(
    "-i",
    dest="filename",
    default=
    "/home/martin/stage/cl-py-generator/example/70_star_tracker/source/hip_main.dat",
    help="input file",
    metavar="FILE")
parser.add_argument("-o",
                    dest="ofile",
                    default="out",
                    help="output file",
                    metavar="FILE")
args = parser.parse_args()
print(args)


# Cell
column_names = [
    "Catalog", "HIP", "Proxy", "RAhms", "DEdms", "Vmag", "VarFlag", "r_Vmag",
    "RAdeg", "DEdeg", "AstroRef", "Plx", "pmRA", "pmDE", "e_RAdeg", "e_DEdeg",
    "e_Plx", "e_pmRA", "e_pmDE", "DE--RA", "Plx--RA", "Plx--DE", "pmRA--RA",
    "pmRA--DE", "pmRA--Plx", "pmDE--RA", "pmDE--DE", "pmDE--Plx", "pmDE--pmRA",
    "F1", "F2", "---", "BTmag", "e_BTmag", "VTmag", "e_VTmag", "m_BTmag",
    "B-V", "e_B-V", "r_B-V", "V-I", "e_V-I", "r_V-I", "CombMag", "Hpmag",
    "e_Hpmag", "Hpscat", "o_Hpmag", "m_Hpmag", "Hpmax", "HPmin", "Period",
    "HvarType", "moreVar", "morePhoto", "CCDM", "n_CCDM", "Nsys", "Ncomp",
    "MultFlag", "Source", "Qual", "m_HIP", "theta", "rho", "e_rho", "dHp",
    "e_dHp", "Survey", "Chart", "Notes", "HD", "BD", "CoD", "CPD", "_V-I_red",
    "SpType", "r_SpType"
]
df_ = pd.read_csv(args.filename,
                  sep="|",
                  names=column_names,
                  usecols=["Vmag", "RAdeg", "DEdeg"],
                  na_values=["     ", "       ", "        ", "            "])
df = df_
print(df)
# store binary file
a = df.values.astype(np.float32)
fn = "{}_{}x{}_float32.raw".format(args.ofile, a.shape[0], a.shape[1])
print("store in {}.".format(fn))
a.tofile(fn)


# Cell
figure()
plt.hist(df.Vmag, bins=120, log=True)
xlabel("Vmag")
grid()
plt.savefig("dir65_gen01_Vmag.png")
figure()
plt.hist(df.RAdeg, bins=120, log=True)
xlabel("RAdeg")
grid()
plt.savefig("dir65_gen01_RAdeg.png")
figure()
plt.hist(df.DEdeg, bins=120, log=True)
xlabel("DEdeg")
grid()
plt.savefig("dir65_gen01_DEdeg.png")
