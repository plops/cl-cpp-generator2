|       |                                            |
| gen00 | hello world example                        |
| gen01 | sdl example                                |
| gen02 | opencv example                             |

- install emsdk
#+begin_example
git clone https://github.com/emscripten-core/emsdk.git
./emsdk install latest
./emsdk activate latest

source "/home/martin/src/emsdk/emsdk_env.sh"

# Configure emsdk in your shell startup scripts by running:
echo 'source "/home/martin/src/emsdk/emsdk_env.sh"' >> $HOME/.bash_profile

#+end_example
- update emsdk
  #+begin_example
# Fetch the latest registry of available tools.
./emsdk update

# Download and install the latest SDK tools.
./emsdk install latest

# Set up the compiler configuration to point to the "latest" SDK.
./emsdk activate latest

# Activate PATH and other environment variables in the current terminal
source ./emsdk_env.sh
  #+end_example
- get a specific emscripten version
  #+begin_example
emsdk list --old
#emsdk install 2.0.34
#emsdk activate 2.0.34
emsdk install 2.0.10
emsdk activate 2.0.10
  #+end_example

- compile opencv with emscripten
#+begin_example
source "/home/martin/src/emsdk/emsdk_env.sh"
cd ~/src
git clone https://github.com/opencv/opencv.git
cd opencv
source "/home/martin/src/emsdk/emsdk_env.sh"
# export EMSCRIPTEN=$EMSDK
ln -s ~/src/opencv/platforms/ /home/martin/src/opencv/build_wasm/./platforms
emcmake python ./platforms/js/build_js.py build_wasm --build_wasm --threads --simd
# this really only works with 2.0.10, i tried 2.0.34 and latest

### next time add this

emcmake python  ./platforms/js/build_js.py build_wasm  --build_wasm \
  --threads --simd --webnn --cmake_option=-DOPENCV_EXTRA_MODULES_PATH=opencv_contrib/modules
 

#+end_example
- test the opencv in browser
  #+begin_example 
cd /home/martin/src/opencv/build_wasm/bin
python -m http.server

##### this requires --build_test which i have not done
  #+end_example
  
- how to make the build smaller
  - https://lambda-it.ch/blog/build-opencv-js
  - https://github.com/adishavit/party_parrot
  - he writes a c++ program that links with opencv (web assembly) and
    converts colors of an animation
  - inputs and results are transferred between c++ and js in a way
    that minimizes copies
  - printf bit smaller than cout
  - flags to optimize size:
    `-s NO_FILESYSTEM=1 -s ELIMINATE_DUPLICATE_FUNCTIONS=1 -s NO_EXIT_RUNTIME=1`
  - -O3 is downgraded to -O2

- can i write a c++ program that depends on (a small subset of)
  opencv?
  http://videocortex.io/2017/opencv-web-app/

- reading
  - i want to read camera in browser
  - perform aruco detection with opencv in browser

https://emscripten.org/docs/porting/asyncify.html


https://web.dev/fugu-status/
https://www.chromium.org/teams/web-capabilities-fugu/
https://fugu-tracker.web.app/

pan/tilt for camera


http://aggregate.org/DIT/KREMY/ image denoise

http://aggregate.org/DIT/KREMY/noisy220209.pdf
https://learn.sparkfun.com/tutorials/working-with-wire/how-to-use-a-wire-wrap-tool learn wirewrap

8 Color Wrapping Wire AWG30 Cable OK Line PCB Flying Jumper Wire Electrical Wire + WSU Wire Wrap Strip Unwrap Tool BUY (23EUR)


http://earth.google.com/web webassembly based

- https://github.com/serghov/OpencvFaceDetectWasm
  - index.html in /web loads a video in a <video> tag and runs a small
    script that copies each frame of that video onto a canvas, runs
    getImageData on that canvas and passes the resulted pixel array to
    c++.

  - main.cpp in /cpp grabs the pixel array passed by js, wraps it in
    an opencv Mat and runs haar face detection on it. Afterwards the
    image is displayed using emscripten's port of SDL.

- webgl
  - https://emscripten.org/docs/porting/multimedia_and_graphics/OpenGL-support.html#opengl-support
  - To only target WebGL 2 and drop support for WebGL 1 altogether to
    save code size, pass the linker flags -s MIN_WEBGL_VERSION=2 and
    -s MAX_WEBGL_VERSION=2.
- EMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES sounds interesting
- https://github.com/emscripten-core/emscripten/blob/main/site/source/docs/compiling/Building-Projects.rst

- egl
  - https://emscripten.org/docs/porting/multimedia_and_graphics/EGL-Support-in-Emscripten.html#egl-support-in-emscripten
  - https://github.com/emscripten-core/emscripten/blob/main/tests/third_party/glbook/Common/esUtil.c


- sdl
  - https://github.com/emscripten-core/emscripten/blob/main/tests/hello_world_sdl.cpp
  - Another option is to use Asyncify which will rewrite the program
    so that it can return to the browserâ€™s main event loop by just
    calling emscripten_sleep(). Note that this rewriting causes size
    and speed overhead while emscripten_request_animation_frame_loop /
    emscripten_set_main_loop as described earlier do not.

- example of a face detector
  https://github.com/serghov/OpencvFaceDetectWasm/blob/master/cpp/main.cpp
