#ifndef PROTO2_H
#define PROTO2_H
int main ();  
template<typename... ARGS> explicit Code (ARGS&& ...args);  
static Code FromFile (const std::string& name);  
const auto& code ();  
template<typename... ARGS> Header (const std::string& name, ARGS&& ...args);  
const auto& name ();  
template<typename... ARGS> static inline std::vector<void*> BuildArgs (const ARGS& ...args);  
static std::string extract ();  
static std::string extract ();  
inline Kernel (const std::string& name);  
void addComma ();  
template<typename T> auto& addValue (const T& val);  
template<typename T> auto& addType ();  
const std::string& operator() ();  
inline Kernel& instantiate (const TemplateParameters& tp);  
const auto& name ();  
void insert (const std::string& op);  
void insert (const std::string& name, const std::string& value);  
template<typename T> void insertOptions (const T& p);  
template<typename T, typename... TS> void insertOptions (const T& p, const TS& ...ts);  
template<typename... TS> CompilationOptions (TS&& ...ts);  
void GpuArchitecture (int major, int minor);  
 Program (const std::string& name, const Code& code, const std::vector<Header>& headers);  
 Program (const std::string& name, const Code& code);  
inline void registerKernel (const Kernel& k);  
static inline void AddTypesToTemplate (Kernel::TemplateParameters& params);  
template<typename T> static inline void AddTypesToTemplate (Kernel::TemplateParameters& params);  
template<typename T, typename U, typename... REST> static inline void AddTypesToTemplate (Kernel::TemplateParameters& params);  
template<typename... ARGS> inline Kernel& Kernel::instantiate ();  
explicit CudaDeviceProperties (const cudaDeviceProp& props);  
 CudaDeviceProperties (int device);  
static CudaDeviceProperties FromExistingProperties (const cudaDeviceProp& props);  
static CudaDeviceProperties ByIntegratedType (bool integrated);  
const auto& getRawStruct ();  
auto major ();  
auto minor ();  
bool integrated ();  
const char* name ();  
explicit CudaDevice (int device);  
inline CUdevice handle ();  
static CudaDevice FindByProperties (const CudaDeviceProperties& props);  
static int NumberOfDevices ();  
void setAsCurrent ();  
const auto & properties ();  
const char* name ();  
static CudaDevice FindByName (std::string name);  
static std::vector<CudaDevice> EnumerateDevices ();  
static CudaDevice CurrentDevice ();  
 CudaContext (const CudaDevice& device);  
 ~CudaContext ();  
#endif