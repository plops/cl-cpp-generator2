cmake_minimum_required(VERSION 3.17)
project(cxx_reference_koan)

set(CMAKE_CXX_STANDARD 26)
set(CMAKE_CXX_STANDARD_REQUIRED yes)
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

if (NOT WIN32)
    add_compile_options(
            -Wall
            -Wextra
            -Wconversion
            -Wdouble-promotion
            -Wno-unused-parameter
            -Wno-unused-function
            -Wno-sign-conversion
            -Wvla
            -Wframe-larger-than=5000
            -Wstack-usage=10000
            #-Wshadow
            -Wformat=2
            -fno-common
            -fstack-usage
            -fvisibility=hidden
            -fno-strict-overflow
            -Wno-strict-overflow
	    # https://medium.com/@simontoth/daily-bit-e-of-c-hardened-mode-of-standard-library-implementations-18be2422c372
	    -fhardened
    )

endif ()

file(GLOB_RECURSE SOURCE_FILES src/*.cpp)

# AddressSanitizer
option(ENABLE_ASAN "Enable AddressSanitizer" ON)
if (ENABLE_ASAN)
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
endif ()

# UndefinedBehaviorSanitizer
option(ENABLE_UBSAN "Enable UndefinedBehaviorSanitizer" ON)
if (ENABLE_UBSAN)
    add_compile_options(-fsanitize=undefined)
    add_link_options(-fsanitize=undefined)
endif ()

# ThreadSanitizer
option(ENABLE_TSAN "Enable ThreadSanitizer" OFF)
if (ENABLE_TSAN)
    add_compile_options(-fsanitize=thread)
    add_link_options(-fsanitize=thread)
endif ()

# LeakSanitizer
option(ENABLE_LSAN "Enable LeakSanitizer" ON)
if (ENABLE_LSAN)
    add_compile_options(-fsanitize=leak)
    add_link_options(-fsanitize=leak)
endif ()

option(ENABLE_MSAN "Enable MemorySanitizer" OFF)
if (ENABLE_MSAN)
    add_compile_options(-fsanitize=memory)
    add_link_options(-fsanitize=memory)
endif ()

option(STATIC_LINK "Link statically" OFF)
if (STATIC_LINK)
    add_compile_options(-static)
    add_link_options(-static)
endif ()

# set compiler flags
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_options(
            -O0 -g -g3 -ggdb -gdwarf-4
    )
else ()
    #    set(CMAKE_UNITY_BUILD true)
    #    set(CMAKE_UNITY_BUILD_BATCH_SIZE 90)
    add_compile_options(
            -ffunction-sections
            -fdata-sections
            -Wpadded
            -march=znver3
            -mtune=znver3
            -fuse-ld=mold
    )
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    add_link_options(
            #  -Wl,-gc-sections,--print-gc-sections,--print-memory-usage,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map
            #-Wl,-gc-sections,--print-gc-sections
            -Wl,-gc-sections
    )
endif ()

include_directories(${CMAKE_SOURCE_DIR}/src)
add_executable(
        ${PROJECT_NAME}
        ${SOURCE_FILES}
)
target_link_libraries(
        ${PROJECT_NAME}
        PRIVATE
)
target_include_directories(
        ${PROJECT_NAME}
        PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR} # for autogenerated capnp header
)
# Define the test executable
option(ENABLE_ARENAREF_TESTS "Enable unit tests" OFF)

if (ENABLE_ARENAREF_TESTS)
    enable_testing()

    #        set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/cmake")
    #include(coverage)
    #add_coverage_target("*/tests/*")

    #        # Fetch Google Test
    #        include(FetchContent)
    #        FetchContent_Declare(
    #                googletest
    #                GIT_REPOSITORY https://github.com/google/googletest.git
    #                GIT_TAG v1.14.0  # specify the commit hash or tag here
    #        )
    #        FetchContent_MakeAvailable(googletest)

    set(test_sources
            tests/test_Ref.cpp
            tests/test_Arena.cpp
    )
    set_source_files_properties(${test_sources} PROPERTIES UNITY_GROUP "Tests")
    add_executable(unit_tests
            ${test_sources}
            #${SOURCE_FILES}
    )

    # Set specific compiler options for the unit_tests target (turn off optimizations for coverage)
    target_compile_options(unit_tests PRIVATE
            -O0 #-fprofile-arcs -ftest-coverage --coverage
    )
    target_link_options(unit_tests PRIVATE
            # --coverage
    )  # Link with the coverage library

    # Link the test executable with Google Test and the necessary libraries
    target_link_libraries(unit_tests
            gtest_main
            gtest
    )
    target_include_directories(unit_tests PRIVATE
            ${PROJECT_SOURCE_DIR}/src
            ${CMAKE_CURRENT_BINARY_DIR}
    )

    # Register the test with CTest
    add_test(NAME unit_tests COMMAND unit_tests)
endif ()
#
#
