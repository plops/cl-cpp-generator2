|       |                          |
| gen00 | imgui and implot demo    |
| gen01 | imgui, implot and opencv |
|       |                          |
* references
 - kosarevsky: "3d graphics rendering cookbook"

 - The Cherno: "BEST WAY to make Desktop Applications in C++"
   - https://www.youtube.com/watch?v=vWXrFetSH8w

 - Why and How To Use ImGui For Your Coding Projects | Tutorial & Case Study
   - https://www.youtube.com/watch?v=U1BnzWX194Q
   - use vcpgk to install glad, glfw and imgui
     - seems to support imgui docking branch: https://github.com/microsoft/vcpkg/issues/18609
       
* install vcpkg

  #+begin_example
cd ~/src
git clone https://github.com/Microsoft/vcpkg.git
./vcpkg/bootstrap-vcpkg.sh -disableMetrics
  #+end_example
- install imgui
  - https://vcpkg.info/port/imgui
- install implot
  - https://github.com/epezent/implot
  - note that you should enable 32-bit indices if plotting heatmaps
    #+begin_example
~/src/vcpkg/vcpkg install imgui[docking-experimental,glfw-binding,opengl3-binding]
~/src/vcpkg/vcpkg install implot
    #+end_example
- files are installed here: /home/martin/src/vcpkg/packages/glfw3_x64-linux/lib/pkgconfig/glfw3.pc
#+begin_example
Installing package imgui[core,docking-experimental,glfw-binding,opengl3-binding]:x64-linux...
Elapsed time for package imgui:x64-linux: 22.9 s

Total elapsed time: 30.95 s

The package imgui provides CMake targets:

    find_package(imgui CONFIG REQUIRED)
    target_link_libraries(main PRIVATE imgui::imgui)

Using source at /home/martin/src/vcpkg/buildtrees/implot/src/v0.12-10fbb8cc87.clean

Total elapsed time: 2.381 min

The package implot provides CMake targets:

    find_package(implot CONFIG REQUIRED)
    target_link_libraries(main PRIVATE implot::implot)


#+end_example

  
- configure cmake using vcpkg
  #+begin_example
mkdir b
cmake -B b -S . -DCMAKE_TOOLCHAIN_FILE=/home/martin/src/vcpkg/scripts/buildsystems/vcpkg.cmake
cmake --build b
  #+end_example

- try to also use opencv (and maybe later ceres)
  - opencv with imgui  https://gist.github.com/UnaNancyOwen/acfc71de5b157d2ba22c090b420030e4
  - how to read video with opencv https://docs.opencv.org/3.4/d3/d9c/samples_2cpp_2tutorial_code_2videoio_2video-write_2video-write_8cpp-example.html
#+begin_example
cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=/home/martin/src/vcpkg/scripts/buildsystems/vcpkg.cmake
#+end_example
- sudo dnf install opencv-devel
- charuco board example https://docs.opencv.org/4.x/df/d4a/tutorial_charuco_detection.html
- parallel processing with opencv https://github.com/dwood3/cppnd-capstone/blob/master/src/main.cpp
  - https://www.manmade2.com/concurrent-c-opencv-video-streaming/
  - grabframe symbolized as conveyor belt, stores frames in
    frameStack, clears when stack flows over
  - processFrame another conveyor, read last frame from stack, some
    image processing, store in contourStack
  - main, start two threads, set stopSig when user quits, display
    results
#+begin_example
class message_queue<T>
  T receive()
    lock(mutex)
    condition.wait()
    msg = move(queue.back)
    queue.pop_back
    return msg
    
  send(T&&)
    lock(mutex)
    queue.push_back(std::move(msg))
    condition.notify_one()
    
  queue : deque<T>
  mutex : mutex
  condition : condition_variable
  
class process_frame_event
  batch_idx, frame_idx, idm : int
  frame : Mat
  fps, seconds : real

class process_frame_message
  batch_idx, frame_idx : int
  seconds : real
  medians : vector<int>

	std::shared_ptr<message_queue<process_frame_event>> _eventQueue = std::make_shared<message_queue<process_frame_event>>();
	std::shared_ptr<message_queue<processed_frame_message>> _msgQueue = std::make_shared<message_queue<processed_frame_message>>();

	int num_threads = 4;
	std::vector<keyframe_processor> kfps;
	std::vector<std::thread> kfp_threads;
#+end_example
