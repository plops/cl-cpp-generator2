#include "gui.h"
#include "hello_template.h"
#include <QApplication>
#include <QMainWindow>
#include <cassert>
#include <ceres/ceres.h>
#include <chrono>
#include <cmath>
#include <glog/logging.h>
#include <iomanip>
#include <iostream>
#include <qcustomplot.h>
#include <thread>
using ceres::AutoDiffCostFunction;
using ceres::CostFunction;
using ceres::Problem;
using ceres::Solve;
using ceres::Solver;
int main(int argc, char **argv) {
  google::InitGoogleLogging(argv[0]);
  QApplication app(argc, argv);
  MainWindow w;
  auto x0 = (1.0);
  auto x1 = (1.0);
  auto x2 = (1.0);
  auto x3 = (1.0);
  auto x4 = (1.0);
  auto problem = Problem();
  auto n = 67;
  auto data_x = std::vector<double>({(0.),
                                     (7.575757575758e-2),
                                     (0.151515151515151520000000000000),
                                     (0.227272727272727300000000000000),
                                     (0.303030303030303040000000000000),
                                     (0.378787878787878800000000000000),
                                     (0.454545454545454600000000000000),
                                     (0.530303030303030300000000000000),
                                     (0.606060606060606100000000000000),
                                     (0.681818181818181800000000000000),
                                     (0.757575757575757600000000000000),
                                     (0.833333333333333300000000000000),
                                     (0.909090909090909200000000000000),
                                     (0.984848484848484900000000000000),
                                     (1.06060606060606060000000000000),
                                     (1.13636363636363620000000000000),
                                     (1.21212121212121220000000000000),
                                     (1.28787878787878780000000000000),
                                     (1.36363636363636350000000000000),
                                     (1.43939393939393940000000000000),
                                     (1.51515151515151510000000000000),
                                     (1.59090909090909080000000000000),
                                     (1.66666666666666650000000000000),
                                     (1.74242424242424270000000000000),
                                     (1.81818181818181830000000000000),
                                     (1.89393939393939400000000000000),
                                     (1.96969696969696970000000000000),
                                     (2.04545454545454540000000000000),
                                     (2.12121212121212100000000000000),
                                     (2.19696969696969700000000000000),
                                     (2.27272727272727250000000000000),
                                     (2.34848484848484860000000000000),
                                     (2.42424242424242430000000000000),
                                     (2.50),
                                     (2.57575757575757570000000000000),
                                     (2.65151515151515140000000000000),
                                     (2.72727272727272700000000000000),
                                     (2.80303030303030280000000000000),
                                     (2.87878787878787900000000000000),
                                     (2.95454545454545460000000000000),
                                     (3.03030303030303030000000000000),
                                     (3.10606060606060600000000000000),
                                     (3.18181818181818170000000000000),
                                     (3.25757575757575730000000000000),
                                     (3.33333333333333300000000000000),
                                     (3.40909090909090870000000000000),
                                     (3.48484848484848530000000000000),
                                     (3.56060606060606060000000000000),
                                     (3.63636363636363670000000000000),
                                     (3.71212121212121200000000000000),
                                     (3.78787878787878800000000000000),
                                     (3.86363636363636330000000000000),
                                     (3.93939393939393940000000000000),
                                     (4.01515151515151500000000000000),
                                     (4.09090909090909100000000000000),
                                     (4.16666666666666700000000000000),
                                     (4.24242424242424200000000000000),
                                     (4.31818181818181800000000000000),
                                     (4.39393939393939400000000000000),
                                     (4.46969696969697000000000000000),
                                     (4.54545454545454500000000000000),
                                     (4.62121212121212100000000000000),
                                     (4.69696969696969700000000000000),
                                     (4.77272727272727300000000000000),
                                     (4.84848484848484900000000000000),
                                     (4.92424242424242400000000000000),
                                     (5.0)});
  auto data_y = std::vector<double>(
      {(1.06062074086100200000000000000), (1.09029364579615430000000000000),
       (1.15956844096776380000000000000), (1.21943863917488770000000000000),
       (1.21206228399777300000000000000), (1.26388631403860830000000000000),
       (1.26404465276416380000000000000), (1.36745708440546400000000000000),
       (1.36553135330447060000000000000), (1.33464674674198340000000000000),
       (1.38761348444547440000000000000), (1.36548552110223050000000000000),
       (1.54100399282725760000000000000), (1.52572281670034870000000000000),
       (1.55152831616528570000000000000), (1.48822503975473940000000000000),
       (1.50973416321020570000000000000), (1.69326882982093800000000000000),
       (1.67811358278154200000000000000), (1.70490409862155000000000000000),
       (1.74264106114752600000000000000), (1.83335232214172670000000000000),
       (1.74924753988440050000000000000), (1.79434641265502300000000000000),
       (1.82843362739524080000000000000), (1.86300654138751430000000000000),
       (2.00719581409707230000000000000), (2.11500549492665170000000000000),
       (2.04029032711685800000000000000), (2.06386268473978340000000000000),
       (2.27319848120045100000000000000), (2.14044099496766200000000000000),
       (2.32192187600301100000000000000), (2.30451984322025230000000000000),
       (2.41114339340649540000000000000), (2.47293468317486400000000000000),
       (2.41614558376616800000000000000), (2.52856922821963930000000000000),
       (2.56200367881358470000000000000), (2.68665447007428430000000000000),
       (2.70473793613100130000000000000), (2.78184925048163170000000000000),
       (2.86993082990152700000000000000), (3.01687640371952000000000000000),
       (2.93769483954442500000000000000), (3.06481522153943730000000000000),
       (3.20920519897285850000000000000), (3.17709107134943650000000000000),
       (3.32039771044794650000000000000), (3.28103839746159660000000000000),
       (3.54152437688398750000000000000), (3.45348837167028500000000000000),
       (3.68025649984451550000000000000), (3.62867462311363700000000000000),
       (3.85550501770623730000000000000), (3.75927929452977000000000000000),
       (3.95606269094860560000000000000), (4.06373062465117700000000000000),
       (4.17708331210560900000000000000), (4.15830903943491200000000000000),
       (4.38155934375220500000000000000), (4.42493820657396900000000000000),
       (4.54264519204080200000000000000), (4.69914701986108200000000000000),
       (4.79719396603283950000000000000), (4.81447218773618400000000000000),
       (4.95855375662182050000000000000)});
  double params[5] = {(1.0), (1.0), (1.0), (1.0), (1.0)};
  w.plot_scatter(data_x, data_y);
  for (auto i = 0; (i) < (n); (i) += (1)) {
    problem.AddResidualBlock(
        new AutoDiffCostFunction<ExponentialResidual, 1, 5>(
            new ExponentialResidual(data_x[i], data_y[i])),
        nullptr, params);
  }
  auto options = Solver::Options();
  auto summary = Solver::Summary();
  options.minimizer_progress_to_stdout = true;
  options.max_num_iterations = 100;
  options.linear_solver_type = ceres::DENSE_QR;
  Solve(options, &problem, &summary);
  {

    (std::cout) << (std::setw(10))
                << (std::chrono::high_resolution_clock::now()
                        .time_since_epoch()
                        .count())
                << (" ") << (std::this_thread::get_id()) << (" ") << (__FILE__)
                << (":") << (__LINE__) << (" ") << (__func__) << (" ") << ("")
                << (" ") << (std::setw(8)) << (" summary.BriefReport()='")
                << (summary.BriefReport()) << ("'") << (std::endl)
                << (std::flush);
  }
  for (auto i = 0; (i) < (5); (i) += (1)) {
    {

      (std::cout) << (std::setw(10))
                  << (std::chrono::high_resolution_clock::now()
                          .time_since_epoch()
                          .count())
                  << (" ") << (std::this_thread::get_id()) << (" ")
                  << (__FILE__) << (":") << (__LINE__) << (" ") << (__func__)
                  << (" ") << ("") << (" ") << (std::setw(8))
                  << (" params[i]='") << (params[i]) << ("'") << (std::endl)
                  << (std::flush);
    }
  }
  auto fit_n = 1200;
  auto fit_x = std::vector<double>();
  auto fit_y = std::vector<double>();
  for (auto i = 0; (i) < (fit_n); (i) += (1)) {
    auto mi = (0.);
    auto ma = (5.0);
    auto x_ = ((((ma) * (i))) / (((fit_n) - (1))));
    auto N = 5;
    auto xrel = ((((x_) - (mi))) / (((ma) - (mi))));
    auto xpos = ((xrel) * (((N) - (2))));
    auto lo_idx = int(xpos);
    auto tau = ((xpos) - (lo_idx));
    auto hi_idx = ((1) + (lo_idx));
    assert((hi_idx) <= (4));
    assert((lo_idx) <= (3));
    assert((0) <= (hi_idx));
    assert((0) <= (lo_idx));
    auto lo_val = params[lo_idx];
    auto hi_val = params[hi_idx];
    auto lerp = ((((tau) * (lo_val))) +
                 ((((((1.0)) - (tau))) * (((hi_val) - (lo_val))))));
    fit_x.push_back(x_);
    fit_y.push_back(lerp);
  }
  w.plot_line(fit_x, fit_y);
  w.show();
  return app.exec();
}