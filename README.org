* Goal

The purpose of this Lisp package is to bring the power of Common Lisp
macros to languages of that look like C or C++. This code generator is
an incompatible successor to cl-cpp-generator. I add improvements in
the semantics that I discovered when implementing cl-py-generator and
cl-golang-generator. Most notably Common Lisp style type declarations,
Common Lisp style operator names (incf, logior, and) and implicit
function calls.

* Installation


I assume that you have quicklisp installed. Add the cl-cpp-generator2
package in your home directory like this:
#+BEGIN_EXAMPLE
cd ~
mkdir stage
git clone https://github.com/plops/cl-cpp-generator2
ln -s ~/stage/cl-cpp-generator2 ~/quicklisp/local-projects.
#+END_EXAMPLE

I always have my files in ~/stage. (Here ~ means home directory). This
might be necessary to run the examples. Ideally it should run from any
folder but I have no idea how to test this properly. So I suggest you
extract the repo in ~/stage as well.

Open gen01.lisp in emacs/slime and call the s-expressions in
sequence. I use eval-in-repl and C-return but you can also use
C-M-x. The idea is to modify the last huge s-expression and press C-c
C-c to regenerate all necessary c files.


* Example
Here is a simple hello world example:
#+BEGIN_EXAMPLE
(include <stdio.h>)
(defun main (argc argv)
  (declare (type int argc)
	   (type char** argv)
	   (values int))
  (printf (string "hello world!"))
  (return 0))
#+END_EXAMPLE
Look at
https://github.com/plops/cl-cpp-generator2/blob/master/example/01_helloworld/gen.lisp
for the full lisp code that imports the cl-cpp-generator2 package
using quicklisp.  I usually open this lisp file in Emacs/Slime with
the Common Lisp implementation SBCL and run each s-expression with
C-M-x (or C-Enter if the emacs package eval-in-repl is available).
The generated C code is here:
https://github.com/plops/cl-cpp-generator2/blob/master/example/01_helloworld/source/helloworld.c

For a more complete example look at
https://github.com/plops/cl-cpp-generator2/blob/master/example/04_vulkan/gen01.lisp .
I use macros in earnest to minimize the boilerplate required in the
vulkan tutorial.  

The Common Lisp function vkcall
#+BEGIN_EXAMPLE
vkcall (verb subject <params> <args>)
#+END_EXAMPLE
fills an info structure, issues a call to the vulkan library and checks the result:
#+BEGIN_EXAMPLE
,(vkcall
  `(create
    image
    (:imageType
     VK_IMAGE_TYPE_2D
     :extent.width width
     :extent.height height
     :extent.depth 1
     :mipLevels 1
     :arrayLayers 1
     :format format
     :tiling tiling
     :initialLayout VK_IMAGE_LAYOUT_UNDEFINED
     :usage usage
     :sharingMode VK_SHARING_MODE_EXCLUSIVE
     :samples VK_SAMPLE_COUNT_1_BIT
     :flags 0)
    (_device &info nullptr &image))
  :throw t)
#+END_EXAMPLE

Here is the expanded code:
#+BEGIN_EXAMPLE
      VkImageCreateInfo info = {};
      info.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
      info.imageType = VK_IMAGE_TYPE_2D;
      info.extent.width = width;
      info.extent.height = height;
      info.extent.depth = 1;
      info.mipLevels = 1;
      info.arrayLayers = 1;
      info.format = format;
      info.tiling = tiling;
      info.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
      info.usage = usage;
      info.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
      info.samples = VK_SAMPLE_COUNT_1_BIT;
      info.flags = 0;
      if (!((VK_SUCCESS) == (vkCreateImage(_device, &info, nullptr, &image)))) {
        throw std::runtime_error(
            "failed to (vkCreateImage _device &info nullptr &image)");
      };
#+END_EXAMPLE

More of the generated code is here:
https://github.com/plops/cl-cpp-generator2/blob/master/example/04_vulkan/source/run_01_base.cpp

Even larger complexity is in my attempt to convert this code from C++
to C. I started this conversion in an attempt to reduce compilation
time. Looking back I think I might have achieved this goal by
separating the C++ into multiple cpp files. Passing C arrays to
functions is quite difficult. I do appreciate C++'s `std::vector` more
now. At least I learned that normal C has __auto_type and
_Generic. I'm quite proud of vkprint, a macro that will generate
printf format strings from the types of the input arguments. This
works only for scalar input types, though. Currently, the generated
code is very unreadable. I think with a macro of the C preprocessor
the footprint of the debug printf's in the C code could be
substantially reduced. I don't consider this important enough to spend
time on.

* Overview of examples

|                            | state | comment                                                                                                                                                                                                                                | how nice |
| 01_helloworld              |  100% |                                                                                                                                                                                                                                        |          |
| 02_shader                  |   10% |                                                                                                                                                                                                                                        |          |
| 03_cuda                    |   80% | few cuda examples, not all of them compile                                                                                                                                                                                             |          |
| 04_vulkan                  |  100% | c++ vulkan tutorial in single file                                                                                                                                                                                                     |          |
| 05_vulkan_generic_c        |  100% | vulkan tutorial using C, split into 21 files                                                                                                                                                                                           |          |
| 06_vulkan_ray              |    1% | did not get very far with vk_ray                                                                                                                                                                                                       |          |
| 07_glfw_optix7             |   90% | i think it worked, get segfault because of missing font                                                                                                                                                                                |          |
| 08_copernicus_radar        |   80% | decodes raw satellite packets                                                                                                                                                                                                          | **       |
| 09_concurrent_producer_fsm |   90% | try std::thread, mutex and guards                                                                                                                                                                                                      |          |
| 10_filament_render         |    1% | i think i never managed to compile filament                                                                                                                                                                                            |          |
| 11_nvidia_cutlass          |   10% | got stuck on a bug in nvidia tutorial, wait for their fix                                                                                                                                                                              |          |
| 12_business_card_ray       |  100% | raytracer that could fit on a business card converted cuda (by someone else, i just converted code to cl-cpp-generator2)                                                                                                               |          |
| 13_cuda_std                |   10% | try automatic variable features of the new cuda standard library (revisit when cuda 11 is launched)                                                                                                                                    |          |
| 14_skia                    |    1% | i can't even compile skia                                                                                                                                                                                                              |          |
| 15_godot                   |    5% | i'm trying to compile godot                                                                                                                                                                                                            |          |
| 16_cauldron                |    1% | cauldron doesnt work on linux                                                                                                                                                                                                          |          |
| 17_glfw_lua                |  100% | cad program with polymorphism (javidx) and lua binding                                                                                                                                                                                 | ***      |
| 18_parallel_stl            |  100% | example of parallel computation (coffeebeforearch)                                                                                                                                                                                     |          |
| 19_nvrtc                   |   40% | try to load cuda code at runtime (mgopshtein), this is not compatible with g++, use 21_nvrtc_yacx instead                                                                                                                              |          |
| 20_tbb                     |  100% | parallel_invoke example for intel thread building blocks (coffeebeforearch)                                                                                                                                                            |          |
| 21_nvrtc_yacx              |  100% | load cuda at runtime                                                                                                                                                                                                                   |          |
| 22_lmdb                    |   90% | lightning db (lmdb) example (fast key value disk store)                                                                                                                                                                                |          |
| 23_lockfree_queue          |   70% | one producer, one consumer                                                                                                                                                                                                             |          |
| 24_cuda_graph_launch       |  100% | cuda stream capture and graph launch                                                                                                                                                                                                   |          |
| 25_intel_oneapi            |   20% | try to call sycl on thinkpad t460                                                                                                                                                                                                      |          |
| 26_amd_ryzen               |    0% | i watched some software optimization videos but didn't implement any example                                                                                                                                                           |          |
| 27_sparse_eigen_hydrogen   |   80% | use cuda to solve eigenproblem of hydrogen atom with one electron, ideally i would like to solve for multiple electrons but this is much harder         http://fourierlisp.blogspot.com/2020/07/arpack-sparse-eigenvalues-and-gpu.html | ***      |
| 28_psoc                    |    0% | read about cypress psoc. i tried a bit in the sdk but i just can't bother with windows in my free time                                                                                                                                 |          |
| 29_stm32nucleo             |   80% | the  sdk for this mcu is much more fun (runs in linux). build firmware, try to read adc and dac simultaneously. protobuf definition of serial interface. start some gui code                                                           | ***      |
| 30_wxwidgets_example       |  100% | javidx example for wx widgets                                                                                                                                                                                                          |          |
| 31_gtkmm                   |  100% | simple gtk example                                                                                                                                                                                                                     |          |
| 32_mkl_ryzen               |   90% | run intel mkl on a ryzen processor, seems to work but i didn't perform a proper benchmark                                                                                                                                              |          |
| 33_copernicus_gtk          |   70% | add a gui to copernicus sentinel 1 radar data parser                                                                                                                                                                                   |          |

* FAQ

** There is no such language as c/C++. (https://news.ycombinator.com/item?id=20195740 )

Compared to Lisp, C and C++ syntax looks very similar to me. This code
generator is deliberately kept extremely unsophisticated. It will not
hold your hand helping you to generate correct semantics. I just want
to convert s-expressions into strings that will compile in a C
compiler or a C++ compiler.

** Why doesn't this library generate LLVM? 

I'm interested to experiment with Cuda, OpenCL and Vulkan. Also some
Microcontrollers (Arduino, Altera Nios in FPGA, TI C28x DSP) I worked
with have C compilers.


* Documentation

In the domain specific language I try to provide Common Lisp
conventions as much as possible. The biggest difference is that
conditional expressions don't return a value. I think this keeps the C
code simpler and more readable.

Here is an overview of supported expressions:

| defun name lambda-list [declaration*] form*                     | (defun foo (a) (declare (type int a) (values int)) (return 2)) | int foo(int a){ return 2;}                               |
| let ({var \vert (var [init-form])}*) declaration* form*"        | (let (a (b 3) (c 3)) (declare (type int a b)) ...              | int a; int b=3; auto c=3;                                |
| setf {pair}*                                                    | (setf a 3 b (+ a 3))                                           | a=3; b=a+3;                                              |
| + {summands}*, /, *,  -                                         | (+ a b c)                                                      | a+b+c                                                    |
| logior {arg}*                                                   | (logior a b)                                                   | a \vert b                                                |
| logand {arg}*                                                   | (logand a b)                                                   | a & b                                                    |
| or {arg}*                                                       | (or a b)                                                       | a \vert \vert b                                          |
| and {arg}*                                                      | (and a b)                                                      | a && b                                                   |
| /= a b, *=, <=, !=, ==, ^=                                      | (/= a b)                                                       | a /= b                                                   |
| <<, >>, <                                                       | (<< a b)                                                       | a << b                                                   |
| incf a [b=1], decf                                              | (incf a 2)                                                     | a+=2                                                     |
| when                                                            | (when a b)                                                     | if(a) { b; }                                             |
| unless                                                          | (unless a b)                                                   | if(!a) { b; }                                            |
| if                                                              | (if a (do0 b) (do0 c))                                         | if(a) { b; } else {c;}                                   |
| case                                                            | (case a (b (return 3)) (t (return 4)))                         | switch a .. TBD                                          |
| string                                                          | (string "a")                                                   | "a"                                                      |
| char                                                            | (char "a")                                                     | 'a'                                                      |
| aref                                                            | (aref a 2 3)                                                   | a[2][3]                                                  |
| dot                                                             | (dot b (f 3))                                                  | b.f(3)                                                   |
| lambda                                                          | (lambda (x) y)                                                 | TBD                                                      |
| defclass  name ({superclass}*) ({slot-specifier}*) [[class-option]] | (defclass Employee (Person) ... TBD                            | class Employee : Person { ... TBD                        |
| for start end iter                                              | (for ((= a 0) (< a 12) (incf a)) ...)                          | for (a=0; a<12;a++){ ...                                 |
| dotimes i n                                                     | (dotimes (i 12) ...)                                           | for (int i=0; i<12; i++) { ...                           |
| while cond                                                      | (while (== a 1) ...)                                           | while (a==1) { ...                                       |
| foreach item collection                                         | (foreach (a data) ...)                                         | for (auto& a: data) { ...                                |
| deftype name lambda-list {form}*                                | (deftype csf64 () "complex float")                             | typedef complex float csf64                              |
| defstruct0 name {slot-description}*                             | (defstruct0 Point (x int) (y int))                             | struct { int x; int y} Point; typedef sruct Point Point; |
| throw                                                           |                                                                |                                                          |
| return                                                          |                                                                |                                                          |
| (uint32_t*) 42                                                  |  (cast uint32_t* 42)                                           |                                                          |

** Collect function declarations

Sometimes it can be necessary to emit function declarations into a
header file.  For this emit-c provides the argument hook-defun. See
example/08_copernicus_radar/gen00.lisp for an example of how to use
this. This example generates source/proto2.h with function prototypes
of different modules.

#+BEGIN_EXAMPLE
(with-open-file (s (asdf:system-relative-pathname 'cl-cpp-generator2
						  (merge-pathnames #P"proto2.h"
								   *source-dir*))
		   :direction :output
		   :if-exists :supersede
		   :if-does-not-exist :create)
		(loop for e in (reverse *module*) and i from 0 do
		      (destructuring-bind (&key name code) e  
			(emit-c :code code :hook-defun 
				#'(lambda (str)
				    (format s "~a~%" str)))
			
			(write-source (asdf:system-relative-pathname
				       'cl-cpp-generator2
				       (format nil
					       "~a/copernicus_~2,'0d_~a.cpp"
					       *source-dir* i name))
				      code))))
#+END_EXAMPLE

Code modules are collected in the variable *module*. They consist of a name and their code:

#+BEGIN_EXAMPLE
#<cons {1018004A17}>
--------------------
A proper list:
0: (:name mmap :code ..)
1: (:name main :code ..)
#+END_EXAMPLE



** Generic C

  If you are not programming C++ but use either the Clang or GCC
  compiler, then you can enable the generic-c feature like so:
#+BEGIN_EXAMPLE
(setf *features* (union *features* '(:generic-c)))
#+END_EXAMPLE 
 This will declare the types of variables __auto_type if not
 explicitly specified.


* History

This is the tenth in a series of code generators. I started using
c-mera but didn't like its complexity and slowness. I used
cl-cpp-generator quite a bit to create propietary code at different
jobs. In an effort to publish this work I collected links to many
other Lisp related code generation projects in it's README. The talk
was not accepted but I am very grateful for the reviewers'
comments. Their suggestions went into cl-cpp-generator2.

- https://github.com/plops/cl-cpp-generator I tried this generator
  with C/C++/ISPC/OpenCL/Cuda. It was my first attempt. The largest
  project with this is a firmware for a microcontroller. The difficult
  part is to get placement of semicolons right. I'm not terribly happy
  with the current solution. People don't like that every function
  call has to be explicitly stated as such. Initially I thought it
  would help me to add function parameter completion in emacs. But I
  never figured out how to do that and in later code generators I
  simplified the lisp syntax.

- https://github.com/plops/cl-ada-generator (abandoned) I always
  wanted to have a VHDL code generator and thought that ADA would be a
  good target to support a similar language. Unfortunately ADA and
  VHDL have a lot of syntactic constructs which I find difficult to
  express in Lisp semantics that I can remember. So I stopped working
  in this direction.

- https://github.com/plops/cl-py-generator At a new job I generated
  LOTS of python code (75k lines) with this generator. The difficult
  part was to get indents right. It works really well. I should
  backport some features from cl-golang-generator: Variable type
  declaration, when, unless, unitary - and unitary /, logior, logand,
  incf, decf.

- https://github.com/plops/cl-js-generator I played around with webrtc
  and webgl in the browser.  I used parenscript before and I really
  like the way it upholds lisp semantics (every expression returns a
  value). However, the generated javascript can be difficult to read
  (and compare to s-expressions). For this project my goal was to have
  a very minimal mapping from s-expressions to javascript. Turns out
  converting lisp to javascript is very straightforward.

- https://github.com/plops/cl-wolfram-generator (abandoned) At some
  point I was able to download a wolfram language license. I think
  this language is very close to Lisp. I tried some code generation
  but the free license would only work on one computer which is not
  how I work.

- https://github.com/plops/cl-yasm-golang (abandoned for now, FIXME I
  accidentally called this golang and not generator). I was playing
  with the idea to program bare to the metal with either LLVM IR or
  amd64 assembly. Some prototyping indicated that this has extra
  challenges that can't be easily addressed in my
  'single-function-code-generator' approach. These are distributing
  variables on registers, memory handling. Also I'm not sure how much
  or if I could immediatly profit from existing tooling if I dump
  assembly or machine code.

- https://github.com/plops/cl-golang-generator I used this to learn a
  bit of Go.  I implemented quite a few examples of the Golang
  Programming book. In particular I like how straight forward it was
  to add common lisp type declarations. I'm very happy with how this
  experiment turned out. Golang is an expressive, simple
  language. Implementing the code generator was much faster than my C
  generator (because I don't have to think about
  semicolons). Distributing the binaries is much easier than Python
  code. They are however so large (>20Mb) that I wonder if writing
  Common Lisp directly wouldn't be the better approach.


- https://github.com/plops/cl-kotlin-generator Write Android apps. I
  implemented a sufficiently large range of examples and I am
  confident that this code generator can be useful. I don't plan to
  write any Android apps right now, though.

- https://github.com/plops/cl-swift-generator (abandoned for now)
  Fueled by the success with the kotlin generator I started
  this. However, I don't have access to xcode and iphone and currently
  no interest. So this is on hold.


* References

- https://github.com/plops/cl-cpp-generator

- https://www.youtube.com/watch?v=ZAcavCjAhEE dynamic dispatch
- https://www.youtube.com/watch?v=RBA_q9iVhls prefetching
- https://www.youtube.com/watch?v=UNvCuYQCXAI google benchmark
- https://www.youtube.com/watch?v=9ULGJwRu0Q0 cache associativity

- how to compile programs that run on most modern linux distributions
  (>2011):
  https://casualhacking.io/blog/2018/12/25/create-highly-portable-elf-binaries-using-the-build-anywhere-toolchain
- https://github.com/andreasfertig/cppinsights C++ Insights is a
  clang-based tool which does a source to source transformation. Its
  goal is to make things visible which normally, and intentionally,
  happen behind the scenes.  It is able to deduce the type behind auto
  or decltype. The goal is to produce compilable code. However, this
  is not possible in all places.
